{"version":3,"sources":["App.js","index.js"],"names":["App","useState","size","setSize","isPressed","setIsPressed","color","setColor","x","setX","y","setY","ctx","setCtx","canvasRef","useRef","useEffect","current","getContext","drawCircle","beginPath","arc","Math","PI","fillStyle","fill","drawLine","x1","y1","x2","y2","moveTo","lineTo","strokeStyle","lineWidth","stroke","className","ref","width","height","onMouseDown","e","nativeEvent","offsetX","offsetY","onMouseUp","onMouseMove","onClick","type","onChange","target","value","clearRect","ReactDom","render","document","querySelector"],"mappings":"oLAuGeA,EAnGH,WAEX,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,SAAnC,mBAAOK,EAAP,KAAcC,EAAd,KACA,EAAkBN,mBAAS,MAA3B,mBAAOO,EAAP,KAAUC,EAAV,KACA,EAAkBR,mBAAS,MAA3B,mBAAOS,EAAP,KAAUC,EAAV,KACA,EAAsBV,mBAAS,MAA/B,mBAAOW,EAAP,KAAYC,EAAZ,KACMC,EAAYC,iBAAO,IAIzBC,qBAAU,WACLF,GACHD,EAAOC,EAAUG,QAAQC,WAAW,OAGjChB,EAAO,GACVC,EAAQ,IAEAD,EAAO,GACfC,EAAQ,KAGP,CAACK,EAAGE,EAAGR,IAGV,IAyBMiB,EAAa,SAACX,EAAGE,GACtBE,EAAIQ,YACJR,EAAIS,IAAIb,EAAGE,EAAGR,EAAM,EAAa,EAAVoB,KAAKC,IAC5BX,EAAIY,UAAYlB,EAChBM,EAAIa,QAGCC,EAAW,SAACC,EAAIC,EAAIC,EAAIC,GAC7BlB,EAAIQ,YACJR,EAAImB,OAAOJ,EAAIC,GACfhB,EAAIoB,OAAOH,EAAIC,GACflB,EAAIqB,YAAc3B,EAClBM,EAAIsB,UAAmB,EAAPhC,EAChBU,EAAIuB,UAmBL,OACC,sBAAKC,UAAU,OAAf,UACC,wBAAQC,IAAKvB,EAAWwB,MAAM,MAAMC,OAAO,MAAMC,YA3DxB,SAACC,GAC3BpC,GAAa,GACbI,EAAKgC,EAAEC,YAAYC,SACnBhC,EAAK8B,EAAEC,YAAYE,UAwDgEC,UAtD3D,SAACJ,GACzBpC,GAAa,GACbI,EAAK,MACLE,EAAK,OAmD2GmC,YAhDtF,SAACL,GAC3B,GAAIrC,EAAW,CAEd,IAAMyB,EAAKY,EAAEC,YAAYC,QACnBb,EAAKW,EAAEC,YAAYE,QAEzBzB,EAAWU,EAAIC,GACfJ,EAASlB,EAAGE,EAAGmB,EAAIC,GAEnBrB,EAAKoB,GACLlB,EAAKmB,OAuCL,sBAAKM,UAAU,UAAf,UACC,wBAAQW,QApBgB,WAC1B5C,EAAQD,EAAO,IAmBb,eACA,+BAAOA,IACP,wBAAQ6C,QAlBgB,WAC1B5C,EAAQD,EAAO,IAiBb,eACA,uBAAO8C,KAAK,QAAQC,SAdF,SAACR,GACrBlC,EAASkC,EAAES,OAAOC,UAchB,wBAAQJ,QAXU,WACpBnC,EAAIwC,UAAU,EAAG,EAAGtC,EAAUG,QAAQqB,MAAOxB,EAAUG,QAAQsB,SAU7D,sBC7FJc,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,W","file":"static/js/main.322cc2df.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n\nconst App = () => {\n\n\tconst [size, setSize] = useState(10)\n\tconst [isPressed, setIsPressed] = useState(false)\n\tconst [color, setColor] = useState('black')\n\tconst [x, setX] = useState(null)\n\tconst [y, setY] = useState(null)\n\tconst [ctx, setCtx] = useState(null)\n\tconst canvasRef = useRef('')\n\n\n\n\tuseEffect(() => {\n\t\tif (canvasRef) {\n\t\t\tsetCtx(canvasRef.current.getContext('2d'));\n\t\t}\n\n\t\tif (size > 50) {\n\t\t\tsetSize(50)\n\t\t}\n\t\telse if (size < 5) {\n\t\t\tsetSize(5)\n\n\t\t}\n\t}, [x, y, size])\n\n\n\tconst onMouseDownHandler = (e) => {\n\t\tsetIsPressed(true)\n\t\tsetX(e.nativeEvent.offsetX)\n\t\tsetY(e.nativeEvent.offsetY)\n\t}\n\tconst onMouseUpHandler = (e) => {\n\t\tsetIsPressed(false)\n\t\tsetX(null)\n\t\tsetY(null)\n\t}\n\n\tconst onMouseMoveHandler = (e) => {\n\t\tif (isPressed) {\n\n\t\t\tconst x2 = e.nativeEvent.offsetX\n\t\t\tconst y2 = e.nativeEvent.offsetY\n\n\t\t\tdrawCircle(x2, y2)\n\t\t\tdrawLine(x, y, x2, y2)\n\n\t\t\tsetX(x2)\n\t\t\tsetY(y2)\n\t\t}\n\t}\n\n\tconst drawCircle = (x, y) => {\n\t\tctx.beginPath();\n\t\tctx.arc(x, y, size, 0, Math.PI * 2)\n\t\tctx.fillStyle = color\n\t\tctx.fill()\n\t}\n\n\tconst drawLine = (x1, y1, x2, y2) => {\n\t\tctx.beginPath()\n\t\tctx.moveTo(x1, y1)\n\t\tctx.lineTo(x2, y2)\n\t\tctx.strokeStyle = color\n\t\tctx.lineWidth = size * 2\n\t\tctx.stroke()\n\t}\n\n\tconst decreaseBtnHandler = () => {\n\t\tsetSize(size - 5)\n\t}\n\n\tconst increaseBtnHandler = () => {\n\t\tsetSize(size + 5)\n\n\t}\n\n\tconst colorHandler = (e) => {\n\t\tsetColor(e.target.value)\n\t}\n\n\tconst clearHandler = () => {\n\t\tctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\n\t}\n\treturn (\n\t\t<div className=\"wrap\">\n\t\t\t<canvas ref={canvasRef} width=\"800\" height=\"700\" onMouseDown={onMouseDownHandler} onMouseUp={onMouseUpHandler} onMouseMove={onMouseMoveHandler}></canvas>\n\t\t\t<div className=\"toolbox\">\n\t\t\t\t<button onClick={decreaseBtnHandler}>-</button>\n\t\t\t\t<span>{size}</span>\n\t\t\t\t<button onClick={increaseBtnHandler}>+</button>\n\t\t\t\t<input type=\"color\" onChange={colorHandler} />\n\t\t\t\t<button onClick={clearHandler}>X</button>\n\t\t\t</div>\n\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import ReactDom from 'react-dom';\nimport App from './App';\n\nReactDom.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}